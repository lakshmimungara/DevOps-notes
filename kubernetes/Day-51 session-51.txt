Day-51 session-51(29/10/2024)
-------------------------------
we practiced multiple resources 
we completed k8 expense project 

Now in todays class
-------------------
Volumes in kubernetes 
----------------------
-> volumes are the one of the advantage of kubernetes 

what we do and where we keep some imporant files?
A) Some important files we will keep in external hard disk. becoz at any time laptop may crash 

we have two options to store the important files:
-------------------------------------------------
1. external HD --> offline, which is near to our computer --> It has more speed 
2. google drive -> It is completely online. somewhere in network --> less speed 

what is more speed in the above?
A) external hard disk. becoz, it is very nearer to the computer --> more speed

-> In eks, everything is ephemeral 
-> It is not a good thing to keep the data in eks
-> Based on the pods, instances get increased 
-> storage should be outside of the cluster. becoz, it will be safe 

-> for this, we have two options
1. EBS(Elastic Block storage)
2. EFS(Elastic File Storage)

1. EBS(Elastic Block storage)
------------------------------
First, we have to create volume and mount it to the EKS cluster. so,if in case cluster got deleted then storage/data will be safe in volumes 

here, we have two types: -> imporant for interviews
-------------------------
1. static provisioning -> It means, everything should be done by us
2. dynamic provisioning -> It means, everything is done by kubernetes

Static provisioning
---------------------
EBS -> it is just like a block storage -> Like a Hard disk 

1. we need to create a volumes 
2. we need to install the drivers (everything is written in drivers)
3. EKS nodes should have permissions to access EBS volumes 

Revise the IAM sessions by shiva sir in youtube 

we need permissions to access the one service to the other service 
 
for example:
------------
node is in us-east-1b. Can I create disk in us-east-1d?
A) Theoritically it is possible but practically it is not possible 
-> wherever the server is located, disk should also be in the same availability zone 

Before all this, we have to create a cluster 
-> follow the steps 

-> These commands should be done in k8-eksctl folder 
1. Go to AWS 
2. volumes -> create a volume 
	size of the volume: 20 Gi and availability zone is us-east-1a
	click on create volume -> vol-0ac2dba7271c7b315
	Note down the volume id which we created earlier
3. drivers installation --> ebs-csi from the github 
-> kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.36" 
-> kubectl get namespaces 
-> kubectl get pods -n kube-system (it shows the administration related pods)

-> every instance has a specific role to access 
-> open the us-east-1a zone node(instance) -> IAM role 
4. IAM -> roles -> add permissions -> attach policy -> AmazonEBSCSIDriver -> click on 


Persistant volumes and persistant volume claim --> imp for interviews 
------------------------------------------
-> k8 created a wrapper objects to manage underlying volumes. becoz, k8 engineer will not have full idea on volumes 
-> managing storage is distinct problem from managing compute instances 
-> The PersistantVolume subSystem provides an API for users and administrators that abstracts details of how storage is provided from how it is consumed
-> To do this, we introduce two new API resources: 
1. PersistantVolume and 
2. PersistantVolumeClaim

persistant volume -> it represents the physical storage like EBS/EFS 
-> if you run something on persistant volume it will access the volumes 

Now we have to create Persistant volume 
----------------------------------
create a new folder in k8 resources -> volumes 

Access modes 
1. ReadWriteOnce -> we can read and write the nodes only once
2. ReadOnlyMany  -> we can read multiple nodes
3. ReadWriteMany -> we can read and write multiple nodes at a time 

Reclaiming policies:
----------------------
1. Retain -> when node is deleted, and we may not loose data
-> When PersistantVolumeClaim is deleted, the PersistantVolume stll exists and the volume is considered "released"
2. Delete -> whenever we delete the PersistantVolume, the disk gets deleted 
3. Recycle -> Disk will not delete but the data cleans up 

=====================
01-ebs-static.yaml
=====================

aptiversion: v1 
kind: PersistantVolume 
metadata:
	name: ebs-static
spec:
	accessMode:
	- ReadWriteOnce
	capacity:
		storage: 20Gi 
	csi:
		driver: ebs.sci.aws.com 
		fsType: ext4 
		volumeHandle: vol-id (This should be what we created earlier)
		
Before this you have to create cluster 

-> kubectl apply -f 01-ebs-static.yaml
-> kubectl get pv 

===============
It is for PVC 
=================

-> pods should claim PV to access that 
-> Till now, we have created actual storage and we have created equivalent object PV in the cluster 
-> Now, we have the storage in our cluster 
-> Pod should ask for the storage, asking is ntng but claiming 
-> Pod should request some storage to the kubernetes i.e PVC 


aptiversion: v1 
kind: PersistantVolume 
metadata:
	name: ebs-static
spec:
	accessMode:
	- ReadWriteOnce
	capacity:
		storage: 20Gi 
	csi:
		driver: ebs.sci.aws.com 
		fsType: ext4 
		volumeHandle: vol-id 
---
aptiversion: v1 
kind: PersistantVolumeClaim 
metadata:
	name: ebs-static
spec:
	storageClassName: ""  # empty string must be explicity set otehrwise default StorageClass
	volumeName: ebs-static
	accessMode:
	- ReadWriteOnce
	resouces:
	  requests:
		storage: 5Gi


-> In static provisioning, storageClass is always empty  


-> kubectl apply -f 01-ebs-static.yaml
-> kubectl get pvc  (status shows "Bound", which means PVC is attached to PV)
-> kubectl describe pvc ebs-static 
-> kubectl describe pv ebs-static 

==============
It is for Pod
==============

aptiversion: v1 
kind: PersistantVolume 
metadata:
	name: ebs-static
spec:
	accessMode:
	- ReadWriteOnce
	capacity:
		storage: 20Gi 
	csi:
		driver: ebs.sci.aws.com 
		fsType: ext4 
		volumeHandle: vol-id 
---
aptiversion: v1 
kind: PersistantVolumeClaim 
metadata:
	name: ebs-static
spec:
	storageClassName: ""
	volumeName: ebs-static
	accessMode:
	- ReadWriteOnce
	resouces:
		requests:
			storage: 5Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: ebs-static
spec:
  nodeSelector:
	topology.kubernetes.io/zone: us-east-1d
  containers:
  - name: nginx
    image: nginx
	volumeMounts:  # docker run -v hostpath:containerpath 
	- name: ebs-static
      mountPath: /usr/share/nginx/html 
	volumes:
	- name: ebs-static
	  persistantVolumeClaim:
	    claimName: ebs-static 
	

-> PV is the physical representation of the storage 
-> It is the wrapper object that represents the external storage 
-> PVC is the clean and requesting for the storage 
-> Pod gets the storage to the PVC 


-> kubectl apply -f 01-ebs-static.yaml
-> kubectl get pods 
-> watch kubectl get pods 
-> kubectl get pods -o wide 
-> kubectl describe pod ebs-static
-> kubectl get nodes --show-labels

===============
using service
===============

aptiversion: v1 
kind: PersistantVolume 
metadata:
	name: ebs-static
spec:
	accessMode:
	- ReadWriteOnce
	capacity:
		storage: 20Gi 
	csi:
		driver: ebs.sci.aws.com 
		fsType: ext4 
		volumeHandle: vol-id 
---
aptiversion: v1 
kind: PersistantVolumeClaim 
metadata:
	name: ebs-static
spec:
	storageClassName: ""
	volumeName: ebs-static
	accessMode:
	- ReadWriteOnce
	resouces:
		requests:
			storage: 5Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: ebs-static
spec:
  nodeSelector:
	topology.kubernetes.io/zone: us-east-1d
  containers:
  - name: nginx
    image: nginx
	volumeMounts: 
	- name: ebs-static
      mountPath: /usr/share/nginx/html 
	volumes:
	- name: ebs-static
	  persistantVolumeClaim:
	    claimName: ebs-static 
---
kind: Service
apiVersion: v1
metadata:
  name: nginx
spec:
  selector:
    type: LoadBalancer
	selector: 
		purpose: ebs-static
	ports:
	- name: nginx-svc-port
	  protocol: TCP
	  port: 80 # service port
	  targetPort: 80 # container port
      nodePort: 30007

select any instance and add the security group inbound rules -> clusterTCP, port-30007, 0.0.0.0/0 

-> kubectl apply -f 01-ebs-static.yaml
-> kubectl get svc 
-> kubectl get pods 
-> kubectl exec -it ebs-static -- bash 
cd /usr/share/nginx/html/
echo "<h1>Hello, I am from ebs static volume</h1>" > hello.html 
-> Access with the DNS in chrome 

-> kubectl delete pod ebs-static
-> After deletion check the DNS access again 

-> kubectl apply -f 01-ebs-static.yaml
-> kubectl get pods 

Some admin activities 
-----------------------
-> kubectl api resources 

while creating resources we have two things;
1. Is that namespace level or not?
2. If not namespace level that is cluster level -> admin should create the resource 

expense project devops engineer got a requirement to have a volume 
-------------------------------------
1. You should send an email to storage team to create disk -> get the approval from manager -> after getting approval they will create disk 
2. You send an emain to K8 admin to create PV and provide them disk details 

Now it's your turn is to create pvc and claim in the pod 
-> we have to ask for administartor for any changes in the permissions 


-> kubectl delete -f 01-ebs-static.yaml 


Dynamic provisioning 
---------------------
-> Here, kubernetes creates the volumes itself dynamically
1. install drivers
2. give permissions ec2 nodes 

storageClass 
-------------
admin creates one storage class for EBS for expense project 

==================
02-ebs-sc.yaml 
=================

apiVersion: storage.k8s.io/v1 
kind: StorageClass
metadata:
	name: expense-ebs 
reclaimPolicy: Retain
provisioner: ebs.csi.aws.com 
volumeBindingMode: WaitForFirstConsumer # storage will be created when pod is getting created 

-> kubectl delete sc expense-ebs 


kubectl apply -f 02-ebs-sc.yaml 
kubectl get sc 

===================
03-ebs-dynamic.yaml
==================== 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-dynamic
spec:
  storageClassName: "expense-ebs"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: ebs-dynamic
  labels:
    purpose: ebs-dynamic
spec:
  nodeSelector:
    topology.kubernetes.io/zone: us-east-1d
  containers:
  - name: nginx
    image: nginx
    volumeMounts: # docker run -v hostpath:contaierpath
    - name: ebs-dynamic
      mountPath: /usr/share/nginx/html
  volumes:
  - name: ebs-dynamic
    persistentVolumeClaim:
      claimName: ebs-dynamic
---
kind: Service
apiVersion: v1
metadata:
  name: nginx
spec:
  type: LoadBalancer
  selector:
    purpose: ebs-dynamic
  ports:
  - name: nginx-svc-port
    protocol: TCP
    port: 80 # service port
    targetPort: 80 # container port
    nodePort: 30007
	
kubectl apply -f 02-ebs-dynamic.yaml 
kubectl get pods 
kubectl describe pod ebs-dynamic 
kubectl get pvc 
kubectl get pv 
kubectl describe pvc ebs-dynamic 


we have to delete the volume first and then cluster 
